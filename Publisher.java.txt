package com.touchtech.queue;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;
//this file was changed on 01-08-2017
//this file was changed again at 9.24 when was on feature branch
import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.SendMessageRequest;

public class Publisher {

	public static String str="hello";
	public static void main(String[] args) {
	//adding this comment
		logTheMessage();

	}

	private static String logTheMessage() {
		AWSCredentials credentials = null;
		try {

			credentials = new BasicAWSCredentials("AKIAJKZYKPQORJMEM4SQ", "I5uPzJe7x2IjkeYysWGMmiNe9qnZPKZejDXdReFe");
			System.out.println("credentials:" + credentials);
		} catch (Exception e) {
			throw new AmazonClientException("Cannot load the credentials from the credential profiles file. "
					+ "Please make sure that your credentials file is at the correct "
					+ "location (~/.aws/credentials), and is in valid format.", e);
		}

		AWSCredentialsProvider credentialsProvider = new MyCredentialProvider();
		AmazonSQS sqs = AmazonSQSClientBuilder.standard().withCredentials(credentialsProvider)
				.withRegion(Regions.AP_SOUTHEAST_1).build();

		try {
			String myQueueUrl = "https://sqs.ap-southeast-1.amazonaws.com/941717986254/TestQueue";

			// Send a message
			String jsonString = "{\"timeStamp\":1501223201901,\"module\":\"3DS-APP-Api\",\"messageId\":\"4722a3f8-929b-4766-96fa-5d630085f25a\",\"message\":\"Push Token was successfully added.\",\"status\":\"SUCCESS\",\"statusCode\":\"s003\",\"info\":{\"authMethod\":\"tap\",\"management\":\"touchtech\",\"cardToken\":\"1234567890123456789012345678901234567890123456789012345678901234\",\"deviceToken\":\"1234567890123456789012345678901234567890123456789012345678901234\",\"pushToken\":\"1234567890123456789012345678901234567890123456789012345678901234\",\"authPinMethod\":\"fingerprint\",\"authPinValue\":\"1234\",\"className\":\"class tech.touch.AppApi.features.pushtoken.handlers.AddHandler\",\"functionName\":\"onMessage\",\"apiName\":\"/api/v1/tap/addPushToken\"}}";
			System.out.println("Sending a message to MyQueue.\n");
			sqs.sendMessage(new SendMessageRequest(myQueueUrl, jsonString));

		} catch (AmazonServiceException ase) {
			System.out.println("Caught an AmazonServiceException, which means your request made it "
					+ "to Amazon SQS, but was rejected with an error response for some reason.");
			System.out.println("Error Message:    " + ase.getMessage());
			System.out.println("HTTP Status Code: " + ase.getStatusCode());
			System.out.println("AWS Error Code:   " + ase.getErrorCode());
			System.out.println("Error Type:       " + ase.getErrorType());
			System.out.println("Request ID:       " + ase.getRequestId());
		} catch (AmazonClientException ace) {
			System.out.println("Caught an AmazonClientException, which means the client encountered "
					+ "a serious internal problem while trying to communicate with SQS, such as not "
					+ "being able to access the network.");
			System.out.println("Error Message: " + ace.getMessage());
		}
		return null;
	}
}


class MyCredentialProvider implements AWSCredentialsProvider,AWSCredentials{
	Properties props = null;
	MyCredentialProvider() {
		FileReader fr = null;
		try {
			fr = new FileReader(new File("credentials.properties"));
			props = new Properties();
			props.load(fr);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public AWSCredentials getCredentials() {
		return new MyCredentialProvider();
	}
	public void refresh() {
	}
	public String getAWSAccessKeyId() {
		
		return props.getProperty("aws_access_key_id");
	}
	public String getAWSSecretKey() {
		return props.getProperty("aws_secret_access_key");
	}
}
